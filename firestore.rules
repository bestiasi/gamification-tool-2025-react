rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Point requests - users can create, admins can read/update
    match /pointRequests/{requestId} {
      allow create: if request.auth != null 
        && request.auth.token.email.matches('.*@bestis.ro$')
        && request.resource.data.keys().hasAll(['userId', 'userEmail', 'userName', 'department', 'task', 'eventDate', 'proofUrl', 'status', 'createdAt']);
      
      allow read: if request.auth != null
        && request.auth.token.email.matches('.*@bestis.ro$');
      
      // Admins and secretaries can update (approve/reject)
      allow update: if request.auth != null 
        && (exists(/databases/$(database)/documents/admins/$(request.auth.token.email))
           || exists(/databases/$(database)/documents/secretaries/$(request.auth.token.email)));
    }
    
    // Admin documents - allow authenticated @bestis.ro users to read and write their own
    match /admins/{adminEmail} {
      allow read: if request.auth != null 
        && request.auth.token.email.matches('.*@bestis.ro$');
      
      // Allow any @bestis.ro user to create admin document (for initial setup)
      // In production, you may want to restrict this more
      allow create: if request.auth != null 
        && request.auth.token.email.matches('.*@bestis.ro$')
        && request.resource.data.email.matches('.*@bestis.ro$');
      
      // Only existing admins or the admin themselves can update
      allow update: if request.auth != null 
        && (request.auth.token.email == adminEmail 
           || exists(/databases/$(database)/documents/admins/$(request.auth.token.email)));
      
      // Only existing admins can delete
      allow delete: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Secretary documents - similar to admins but limited permissions
    match /secretaries/{secretaryEmail} {
      allow read: if request.auth != null 
        && request.auth.token.email.matches('.*@bestis.ro$');
      
      // Only admins can create secretaries
      allow create: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.token.email))
        && request.resource.data.email.matches('.*@bestis.ro$');
      
      // Only admins or the secretary themselves can update
      allow update: if request.auth != null 
        && (request.auth.token.email == secretaryEmail 
           || exists(/databases/$(database)/documents/admins/$(request.auth.token.email)));
      
      // Only admins can delete
      allow delete: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Admin transfers
    match /adminTransfers/{transferId} {
      allow create: if request.auth != null 
        && request.auth.token.email.matches('.*@bestis.ro$')
        && exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
      
      allow read, update: if request.auth != null 
        && (resource.data.fromEmail == request.auth.token.email 
           || resource.data.toEmail == request.auth.token.email);
    }
    
    // Tasks collection - read-only for all authenticated users
    match /tasks/{taskId} {
      allow read: if request.auth != null 
        && request.auth.token.email.matches('.*@bestis.ro$');
      
      // Only admins can create/update/delete tasks
      allow write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Department tasks - read-only for all authenticated users
    match /departmentTasks/{taskId} {
      allow read: if request.auth != null 
        && request.auth.token.email.matches('.*@bestis.ro$');
      
      // Only admins can create/update/delete department tasks
      allow write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
  }
}